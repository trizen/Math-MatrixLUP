=encoding utf8

=head1 NAME

Math::MatrixLUP - Matrix operations and LUP decomposition.

=head1 VERSION

Version 0.01

=head1 SYNOPSIS

    use Math::MatrixLUP;

    my $A = Math::MatrixLUP->new([
        [2, -1,  5,  1],
        [3,  2,  2, -6],
        [1,  3,  3, -1],
        [5, -2, -3,  3],
    ]);

    my $det = $A->determinant;
    my $sol = $A->solve([-3, -32, -47, 49]);
    my $inv = $A->invert;
    my $exp = $A->pow(3);

=head1 DESCRIPTION

Math::MatrixLUP provides generic support for matrix operations and LUP decomposition, allowing any type of numbers inside the matrix, including native Perl numbers and numerical objects provided by other mathematical libraries, such as L<Math::AnyNum>.

The supported matrix operations are:

=over 2

=item * matrix-scalar arithmetical operation

=item * matrix multiplication

=item * matrix exponentiation

=item * computing the determinant of a square-matrix

=item * inverting a square-matrix

=item * solving a system of linear equations

=back

=head1 INITIALIZATION

Create a new B<Math::MatrixLUP> object, given a 2D array-ref:

        my $A = Math::MatrixLUP->new([
                [rand,rand,rand],
                [rand,rand,rand],
                [rand,rand,rand],
        ]);

=head2 clone

The matrix can be cloned by calling:

        my $B = $A->clone;

=head2 diagonal

A constructor method that creates a diagonal matrix from a single array-ref of numbers.

        my $Q = Math::MatrixLUP->diagonal([1, 4, 4, 8]);

The matrix is zero filled except for the diagonal members, which take the
value of the vector.

=head2 size

Returns the dimensions of the matrix:

        my ($rows, $cols) = $A->size;

=head2 concat

Concatenates two matrices of same row count. The result is a new
matrix.

        my $B = Math::MatrixLUP->new([[rand],[rand],[rand]]);
        my $C = $A->concat($B);

=head2 transpose

Returns the transposed matrix. This is the matrix where colums and
rows of the argument matrix are swaped.

=head2 neg

Returns the a new matrix with all the terms negated.

    my $B = -$A;
    my $B =  $A->neg;

=head2 add / scalar_add

Add two matrices of the same dimensions:

    my $C = $A + $B;
    my $C = $A->add($B);

If one of the arguments it not a B<Math::MatrixLUP> object, it does scalar addition:

    my $B = $A + $scalar;
    my $C = $A->scalar_add($scalar);

=head2 sub / scalar_sub

Subtract two matrices of the same dimensions:

    my $C = $A - $B;
    my $C = $A->sub($B);

Defined as:

    A/B = A + (-B)

If one of the arguments it not a B<Math::MatrixLUP> object, it does scalar subtraction:

    my $B = $A - $scalar;
    my $C = $scalar - $A;
    my $D = $A->scalar_sub($scalar);

=head2 mul / scalar_mul

Multiplication of two matrices.

    my $C = $A * $B;
    my $C = $A->mul($B);

If one of the arguments it not a B<Math::MatrixLUP> object, it does scalar multiplication:

    my $B = $A * $scalar;
    my $C = $A->scalar_mul($scalar);

=head2 div / scalar_div

Division of two matrices.

    my $C = $A / $B;
    my $C = $A->div($B);

Defined as:

    A/B = A * B^(-1)

If one of the arguments it not a B<Math::MatrixLUP> object, it does scalar division:

    my $B = $A / $scalar;
    my $C = $scalar / $A;
    my $D = $A->div($scalar);

=head2 solve

Solve a system of linear equations.

    my $A = Math::MatrixLUP->new([
        [2, -1,  5,  1],
        [3,  2,  2, -6],
        [1,  3,  3, -1],
        [5, -2, -3,  3],
    ]);

    my $solution = $A->solve([-3, -32, -47, 49]);
    say join(', ', @{$solution});  #=> 2, -12, -4, 1

=head2 invert

Invert a matrix.

=head2 equal

Decide if two matrices are equal.

=head2 diagonal_vector

Extract the diagonal as an array:

    my $diag = $A->diagonal_vector;

=head2 determinant

Compute the determinant of a square matrix.

=head1 AUTHOR

Daniel Șuteu, C<< <trizen at cpan.org> >>

=head1 BUGS

Please report any bugs or feature requests at L<https://github.com/trizen/Math-MatrixLUP/issues>.
I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.

=head1 SUPPORT

You can find documentation for this module with the perldoc command.

    perldoc Math::MatrixLUP

You can also look for information at:

=over 4

=item * GitHub

L<https://github.com/trizen/Math-MatrixLUP>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/Math-MatrixLUP>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/Math-MatrixLUP>

=item * Search CPAN

L<http://search.cpan.org/dist/Math-MatrixLUP/>

=back

=head1 SEE ALSO

=over 4

=item * Related libraries

L<Math::Matrix> - Multiply and invert matrices.

L<Math::GSL::Matrix> - Mathematical functions concerning Matrices using the GNU Scientific Library (GSL).

L<Math::MatrixDecomposition::LU> - LU decomposition with partial pivoting of a real matrix.

L<Math::AnyNum> - Arbitrary size precision for integers, rationals, floating-points and complex numbers.

=back

=head1 LICENSE AND COPYRIGHT

Copyright 2018 Daniel Șuteu.

This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:

L<http://www.perlfoundation.org/artistic_license_2_0>

Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.

If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.

This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.

This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.

Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY
YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


=cut
